#   Nupicter - Hand operated picture filtering tool
#   Copyright (C) 2021  Arkadiusz Choruzy
#
#   Arkadiusz Choruzy
#   achoruzy@gmail.com

"""Nupicter's module for editing Picture objects created by FileHandler module.

Picture class handles objects converted to [[[R, G, B], [R, G, B], ...], ...] format
and includes methods for edition of such files.
"""

import numpy as np
import pathlib as ptl
import string

from PIL import Image


class Picture():
    """The class handles objects that may be edited by its methods and saved as files
    or returned as another Picture class object.

    Args:
        img: pixel list generated by FileHandler. 
    """

    def __init__(self, img):

        self.pixels = img

    def as_array(self):
        """Method for creating numpy type array for the object.

        Returns:
            numpy.array object
        """
        # selfcheck try/except to develop
        return np.asarray(self.pixels)

    def save(self, path: str, file_name: str, file_format='png'):
        """Method saves Picture object to file.

        Args:
            path (str): string typed path for file save
            file_name (str): name for saved file, only letters, numbers, - an _ to be used
            file_format (str, optional, 'png' as default): file format for saving, 
            available options: 'png', 'jpg'

        Raises:
            AttributeError: if path string is not correct or path doesn't exist
            AttributeError: if filename string is not correct
            AttributeError: if format given is not permitted
        """

        save_path = ptl.Path(path)

        if not save_path.is_dir():
            raise AttributeError(
                'Given path is wrong or doesn\'t exist. Input proper path string.')

        for i in string.punctuation:
            if i in '-_':
                continue
            elif i in file_name:
                raise AttributeError(
                    'Filename is wrong. Use letters, numbers, - and _ signs only.')

        if file_format.lower() not in ('png', 'jpg'):
            raise AttributeError(
                'Given file format is not correct. Use png or jpg only.')

        # the array data has to be converted to uint8 <Unsigned integer (0 to 255)> to work well
        np_array_img = self.as_array().astype(np.uint8)  # TO OTHER METHOD ->
        image_to_save = Image.fromarray(np_array_img)
        path_to_save = path + file_name + '.' + file_format

        return image_to_save.save(path_to_save, file_format)

    def return_picture(self):
        """Method for return edited Picture class object.

        Returns:
            nupicter.Picture object
        """
        return Picture(self.pixels)

    def grayscale(self, coef=(0.2164, 0.7152, 0.0722)):
        """Method for converting the picture to a grayscale data.

        Args:
            coef (tuple, optional): a tuple for RGB conversion coeficients, 
            as default equals (0.2164, 0.7152, 0.0722)
        """

        for row in range(0, len(self.pixels)):
            for pix_rgb in self.pixels[row]:
                pix_index = self.pixels[row].index(pix_rgb)

                r_gs = coef[0] * pix_rgb[0]
                g_gs = coef[1] * pix_rgb[1]
                b_gs = coef[2] * pix_rgb[2]

                grayscale_val = int(r_gs + g_gs + b_gs)

                if grayscale_val < 0:
                    grayscale_val = 0
                elif grayscale_val > 255:
                    grayscale_val = 255

                self.pixels[row][pix_index] = [
                    grayscale_val, grayscale_val, grayscale_val]

        return


if __name__ == '__main__':
    pass
